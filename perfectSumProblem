#DP - Top Down
class Solution:
    def perfectSum(self, arr, n, sum):
        # code here
        mod = (10**9 + 7)
        # make dp and fill it with 0
        dp=[[0 for i in range(sum+1)] for j in range(n+1)]
        
        for i in range(n+1):
            # if target sum is given 0 and doesn't matter what arr is given
            # then there is no need to find subset for that
            # just return 1
            dp[i][0] = 1
                
        for i in range(1,n+1):
            for j in range(sum+1):
                # if the element is less than the given sum then we can either consider the 
                # the element or leave it 
                if arr[i-1]<=j:
                    # here, we have two choices 
                    # taken means we have considered the element
                    # reduce the size of array and subtract the sum by that element 
                    # not_taken means we haven't considered the element so reduce
                    # the size of array
                    # add both the ans which we are getting after considering and not_considering
                    # the element
                    dp[i][j]=(dp[i-1][j]+dp[i-1][j-(arr[i-1])]) % mod
                else:
                    # if the element which we are going to add in our subset 
                    # is greater than the sum then skip the element try to check 
                    # for another element
                    dp[i][j] = dp[i-1][j] %mod
        return dp[n][sum] 
